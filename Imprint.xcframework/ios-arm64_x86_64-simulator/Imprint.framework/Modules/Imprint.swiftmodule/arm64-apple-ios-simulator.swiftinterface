// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Imprint
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import Imprint
import Swift
import SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims

public enum ImprintApp {
  public static func startApplication(from viewController: UIKit.UIViewController, configuration: Imprint.ImprintConfiguration)
}
public class ImprintConfiguration {
  public var onCompletion: ((Imprint.ImprintConfiguration.CompletionState, Imprint.ImprintConfiguration.CompletionData?) -> Swift.Void)?
  public init(clientSecret: Swift.String, partnerReference: Swift.String, environment: Imprint.ImprintConfiguration.Environment = .production)
  public enum Environment : Swift.Int {
    case staging
    case sandbox
    case production
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public typealias CompletionData = [Swift.String : Any?]
  public enum CompletionState : Swift.Int {
    case offerAccepted
    case rejected
    case abandoned
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
extension Imprint.ImprintConfiguration.Environment : Swift.Equatable {}
extension Imprint.ImprintConfiguration.Environment : Swift.Hashable {}
extension Imprint.ImprintConfiguration.Environment : Swift.RawRepresentable {}
extension Imprint.ImprintConfiguration.CompletionState : Swift.Equatable {}
extension Imprint.ImprintConfiguration.CompletionState : Swift.Hashable {}
extension Imprint.ImprintConfiguration.CompletionState : Swift.RawRepresentable {}
