name: Test Release Flow (No Publish)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: read  # No write needed for test

jobs:
  test-release:
    runs-on: self-hosted
    # Only run this workflow when triggered by authorized users
    if: |
      github.ref == 'refs/heads/main' && 
      (github.actor == github.repository_owner || 
       contains(github.actor, 'imprint-tech') || 
       contains(github.actor, 'ImprintTech'))
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Need full history for changelog
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false  # Don't persist credentials after this step

      # Configure Git identity for the bot
      - name: Configure Git
        run: |
          git config --local user.name "GitHub Actions Bot"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

      # Update version in podspec and Package.swift
      - name: Calculate New Version
        id: version
        run: |
          # Extract version with a more flexible regex that handles both single and double quotes
          # and accepts whitespace
          CURRENT_VERSION=$(grep -m 1 "s.version" Imprint.podspec | sed -E "s/.*= *[\'\"](([0-9]+\.){2}[0-9]+)[\'\"].*/\1/")
          echo "Current version: $CURRENT_VERSION"
          
          # Make sure we have a valid version to work with
          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format detected: $CURRENT_VERSION"
            # Show the actual content from the podspec to debug
            echo "Content from podspec: $(grep -m 1 "s.version" Imprint.podspec)"
            echo "Using default version 0.1.0"
            CURRENT_VERSION="0.1.0"
          fi
          
          # Split the version string
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          echo "Components: major=$major, minor=$minor, patch=$patch"

          case "${{ github.event.inputs.release_type }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
            *)
              echo "Unknown release type"
              exit 1
              ;;
          esac

          echo "Simulated new version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update podspec - detect whether single or double quotes are used
          if grep -q "s.version.*'" Imprint.podspec; then
            echo "Using single quotes for version in podspec"
            sed -i '' "s/s.version *= *'$CURRENT_VERSION'/s.version = '$NEW_VERSION'/" Imprint.podspec
          else
            echo "Using double quotes for version in podspec"
            sed -i '' "s/s.version *= *\"$CURRENT_VERSION\"/s.version = \"$NEW_VERSION\"/" Imprint.podspec
          fi

      # Generate changelog - sanitize output
      - name: Generate Changelog
        id: changelog
        run: |
          set +x  # Don't echo commands
          # Find the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag exists, use all commits
            echo "No previous tag found, including all commits in changelog"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges | grep -v -i "secret\|password\|token\|key\|credential")
          else
            # Get commits since the last tag
            echo "Generating changelog since tag: $PREVIOUS_TAG"
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges | grep -v -i "secret\|password\|token\|key\|credential")
          fi
          
          # Categorize commits - sanitize output 
          FEATURES=$(echo "$CHANGELOG" | grep -i "feat\|feature" | grep -v -i "secret\|password\|token\|key\|credential" || echo "")
          FIXES=$(echo "$CHANGELOG" | grep -i "fix\|bug" | grep -v -i "secret\|password\|token\|key\|credential" || echo "")
          IMPROVEMENTS=$(echo "$CHANGELOG" | grep -i "improve\|enhance\|refactor\|perf" | grep -v -i "secret\|password\|token\|key\|credential" || echo "")
          OTHERS=$(echo "$CHANGELOG" | grep -v -i "feat\|feature\|add\|fix\|bug\|issue\|improve\|enhance\|refactor\|perf\|secret\|password\|token\|key\|credential" || echo "")
          
          # Create formatted changelog
          # Use GitHub Actions' multiline output syntax directly
          {
            echo "changelog<<CHANGELOG_EOF"
            echo "## What's Changed in v${{ steps.version.outputs.new_version }}"
            echo ""
            
            if [ ! -z "$FEATURES" ]; then
              echo "### New Features"
              echo "$FEATURES"
              echo ""
            fi
            
            if [ ! -z "$FIXES" ]; then
              echo "### Bug Fixes"
              echo "$FIXES"
              echo ""
            fi
            
            if [ ! -z "$IMPROVEMENTS" ]; then
              echo "### Improvements"
              echo "$IMPROVEMENTS"
              echo ""
            fi
            
            if [ ! -z "$OTHERS" ]; then
              echo "### Other Changes"
              echo "$OTHERS"
              echo ""
            fi
            
            echo "CHANGELOG_EOF"
          } >> $GITHUB_OUTPUT

      - name: Show Simulated Changelog
        run: |
          echo "${{ steps.changelog.outputs.changelog }}"

      - name: Show Cocoapods Authentication status
        run: |
          pod trunk me